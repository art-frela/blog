// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Rubric is an object representing the database table.
type Rubric struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *rubricR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rubricL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RubricColumns = struct {
	ID          string
	Title       string
	Description string
}{
	ID:          "id",
	Title:       "title",
	Description: "description",
}

// Generated where

var RubricWhere = struct {
	ID          whereHelperstring
	Title       whereHelpernull_String
	Description whereHelpernull_String
}{
	ID:          whereHelperstring{field: "`rubrics`.`id`"},
	Title:       whereHelpernull_String{field: "`rubrics`.`title`"},
	Description: whereHelpernull_String{field: "`rubrics`.`description`"},
}

// RubricRels is where relationship names are stored.
var RubricRels = struct {
	Posts string
}{
	Posts: "Posts",
}

// rubricR is where relationships are stored.
type rubricR struct {
	Posts PostSlice
}

// NewStruct creates a new relationship struct
func (*rubricR) NewStruct() *rubricR {
	return &rubricR{}
}

// rubricL is where Load methods for each relationship are stored.
type rubricL struct{}

var (
	rubricAllColumns            = []string{"id", "title", "description"}
	rubricColumnsWithoutDefault = []string{"id", "title", "description"}
	rubricColumnsWithDefault    = []string{}
	rubricPrimaryKeyColumns     = []string{"id"}
)

type (
	// RubricSlice is an alias for a slice of pointers to Rubric.
	// This should generally be used opposed to []Rubric.
	RubricSlice []*Rubric
	// RubricHook is the signature for custom Rubric hook methods
	RubricHook func(context.Context, boil.ContextExecutor, *Rubric) error

	rubricQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rubricType                 = reflect.TypeOf(&Rubric{})
	rubricMapping              = queries.MakeStructMapping(rubricType)
	rubricPrimaryKeyMapping, _ = queries.BindMapping(rubricType, rubricMapping, rubricPrimaryKeyColumns)
	rubricInsertCacheMut       sync.RWMutex
	rubricInsertCache          = make(map[string]insertCache)
	rubricUpdateCacheMut       sync.RWMutex
	rubricUpdateCache          = make(map[string]updateCache)
	rubricUpsertCacheMut       sync.RWMutex
	rubricUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rubricBeforeInsertHooks []RubricHook
var rubricBeforeUpdateHooks []RubricHook
var rubricBeforeDeleteHooks []RubricHook
var rubricBeforeUpsertHooks []RubricHook

var rubricAfterInsertHooks []RubricHook
var rubricAfterSelectHooks []RubricHook
var rubricAfterUpdateHooks []RubricHook
var rubricAfterDeleteHooks []RubricHook
var rubricAfterUpsertHooks []RubricHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Rubric) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rubricBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Rubric) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rubricBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Rubric) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rubricBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Rubric) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rubricBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Rubric) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rubricAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Rubric) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rubricAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Rubric) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rubricAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Rubric) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rubricAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Rubric) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rubricAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRubricHook registers your hook function for all future operations.
func AddRubricHook(hookPoint boil.HookPoint, rubricHook RubricHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rubricBeforeInsertHooks = append(rubricBeforeInsertHooks, rubricHook)
	case boil.BeforeUpdateHook:
		rubricBeforeUpdateHooks = append(rubricBeforeUpdateHooks, rubricHook)
	case boil.BeforeDeleteHook:
		rubricBeforeDeleteHooks = append(rubricBeforeDeleteHooks, rubricHook)
	case boil.BeforeUpsertHook:
		rubricBeforeUpsertHooks = append(rubricBeforeUpsertHooks, rubricHook)
	case boil.AfterInsertHook:
		rubricAfterInsertHooks = append(rubricAfterInsertHooks, rubricHook)
	case boil.AfterSelectHook:
		rubricAfterSelectHooks = append(rubricAfterSelectHooks, rubricHook)
	case boil.AfterUpdateHook:
		rubricAfterUpdateHooks = append(rubricAfterUpdateHooks, rubricHook)
	case boil.AfterDeleteHook:
		rubricAfterDeleteHooks = append(rubricAfterDeleteHooks, rubricHook)
	case boil.AfterUpsertHook:
		rubricAfterUpsertHooks = append(rubricAfterUpsertHooks, rubricHook)
	}
}

// One returns a single rubric record from the query.
func (q rubricQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Rubric, error) {
	o := &Rubric{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rubrics")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Rubric records from the query.
func (q rubricQuery) All(ctx context.Context, exec boil.ContextExecutor) (RubricSlice, error) {
	var o []*Rubric

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Rubric slice")
	}

	if len(rubricAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Rubric records in the query.
func (q rubricQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rubrics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rubricQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rubrics exists")
	}

	return count > 0, nil
}

// Posts retrieves all the post's Posts with an executor.
func (o *Rubric) Posts(mods ...qm.QueryMod) postQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`posts`.`rubric_id`=?", o.ID),
	)

	query := Posts(queryMods...)
	queries.SetFrom(query.Query, "`posts`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`posts`.*"})
	}

	return query
}

// LoadPosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rubricL) LoadPosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRubric interface{}, mods queries.Applicator) error {
	var slice []*Rubric
	var object *Rubric

	if singular {
		object = maybeRubric.(*Rubric)
	} else {
		slice = *maybeRubric.(*[]*Rubric)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rubricR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rubricR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`posts`), qm.WhereIn(`posts.rubric_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load posts")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice posts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Posts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postR{}
			}
			foreign.R.Rubric = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RubricID) {
				local.R.Posts = append(local.R.Posts, foreign)
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.Rubric = local
				break
			}
		}
	}

	return nil
}

// AddPosts adds the given related objects to the existing relationships
// of the rubric, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.Rubric appropriately.
func (o *Rubric) AddPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RubricID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `posts` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"rubric_id"}),
				strmangle.WhereClause("`", "`", 0, postPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RubricID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &rubricR{
			Posts: related,
		}
	} else {
		o.R.Posts = append(o.R.Posts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postR{
				Rubric: o,
			}
		} else {
			rel.R.Rubric = o
		}
	}
	return nil
}

// SetPosts removes all previously related items of the
// rubric replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rubric's Posts accordingly.
// Replaces o.R.Posts with related.
// Sets related.R.Rubric's Posts accordingly.
func (o *Rubric) SetPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	query := "update `posts` set `rubric_id` = null where `rubric_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Posts {
			queries.SetScanner(&rel.RubricID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Rubric = nil
		}

		o.R.Posts = nil
	}
	return o.AddPosts(ctx, exec, insert, related...)
}

// RemovePosts relationships from objects passed in.
// Removes related items from R.Posts (uses pointer comparison, removal does not keep order)
// Sets related.R.Rubric.
func (o *Rubric) RemovePosts(ctx context.Context, exec boil.ContextExecutor, related ...*Post) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RubricID, nil)
		if rel.R != nil {
			rel.R.Rubric = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("rubric_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Posts {
			if rel != ri {
				continue
			}

			ln := len(o.R.Posts)
			if ln > 1 && i < ln-1 {
				o.R.Posts[i] = o.R.Posts[ln-1]
			}
			o.R.Posts = o.R.Posts[:ln-1]
			break
		}
	}

	return nil
}

// Rubrics retrieves all the records using an executor.
func Rubrics(mods ...qm.QueryMod) rubricQuery {
	mods = append(mods, qm.From("`rubrics`"))
	return rubricQuery{NewQuery(mods...)}
}

// FindRubric retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRubric(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Rubric, error) {
	rubricObj := &Rubric{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `rubrics` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, rubricObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rubrics")
	}

	return rubricObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Rubric) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rubrics provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rubricColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rubricInsertCacheMut.RLock()
	cache, cached := rubricInsertCache[key]
	rubricInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rubricAllColumns,
			rubricColumnsWithDefault,
			rubricColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rubricType, rubricMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rubricType, rubricMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `rubrics` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `rubrics` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `rubrics` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, rubricPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rubrics")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for rubrics")
	}

CacheNoHooks:
	if !cached {
		rubricInsertCacheMut.Lock()
		rubricInsertCache[key] = cache
		rubricInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Rubric.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Rubric) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rubricUpdateCacheMut.RLock()
	cache, cached := rubricUpdateCache[key]
	rubricUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rubricAllColumns,
			rubricPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rubrics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `rubrics` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, rubricPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rubricType, rubricMapping, append(wl, rubricPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rubrics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rubrics")
	}

	if !cached {
		rubricUpdateCacheMut.Lock()
		rubricUpdateCache[key] = cache
		rubricUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rubricQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rubrics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rubrics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RubricSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rubricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `rubrics` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rubricPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rubric slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rubric")
	}
	return rowsAff, nil
}

var mySQLRubricUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Rubric) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rubrics provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rubricColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRubricUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rubricUpsertCacheMut.RLock()
	cache, cached := rubricUpsertCache[key]
	rubricUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rubricAllColumns,
			rubricColumnsWithDefault,
			rubricColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			rubricAllColumns,
			rubricPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert rubrics, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "rubrics", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `rubrics` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(rubricType, rubricMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rubricType, rubricMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for rubrics")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(rubricType, rubricMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for rubrics")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for rubrics")
	}

CacheNoHooks:
	if !cached {
		rubricUpsertCacheMut.Lock()
		rubricUpsertCache[key] = cache
		rubricUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Rubric record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Rubric) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Rubric provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rubricPrimaryKeyMapping)
	sql := "DELETE FROM `rubrics` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rubrics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rubrics")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rubricQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rubricQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rubrics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rubrics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RubricSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rubricBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rubricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `rubrics` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rubricPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rubric slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rubrics")
	}

	if len(rubricAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Rubric) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRubric(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RubricSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RubricSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rubricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `rubrics`.* FROM `rubrics` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rubricPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RubricSlice")
	}

	*o = slice

	return nil
}

// RubricExists checks if the Rubric row exists.
func RubricExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `rubrics` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rubrics exists")
	}

	return exists, nil
}
